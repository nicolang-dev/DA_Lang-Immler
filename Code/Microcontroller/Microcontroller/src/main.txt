//including libraries
#include <Arduino.h>
#include <constants.h>
#include "NetworkManager.h"
#include "StatusLED.h"
#include "MemoryManager.h"
#include "Log.h"

void handle_buttonPress();
void print(String message);

bool config_mode = false;
unsigned long actual_time = 0;
unsigned long last_wifi_request_time = 0;

NetworkManager* network;
StatusLED* statusLED;
MemoryManager* memory;

void setup(){
    Serial.begin(SERIAL_BAUDRATE);
    network = NetworkManager::getInstance();
    statusLED = StatusLED::getInstance();
    memory = MemoryManager::getInstance();

    statusLED->initializePins();

    if(memory->isWifiSsidSet() && memory->isWifiPasswordSet()){
        //Log::add("wifi ssid and password set");
        String wifi_ssid = memory->readWifiSsid();
        String wifi_password = memory->readWifiPassword();
        //Log::add("starting wifi client");
        network->startClient(wifi_ssid, wifi_password);
        statusLED->setGreen();
    } else {
        //Log::add("wifi ssid and password not set");
        statusLED->setRed();
    }
}

void loop(){
    actual_time = millis();
    /*if(//Log::hasChanged()){
        //Log::add(//Log::getLast//Log());
    }*/

    if(config_mode){
        if(network->wifiCredentialsReceived()){
            Serial.println("wifi credentials received");
            String received_ssid = network->getReceivedSsid();
            String received_password = network->getReceivedPassword();
            memory->writeWifiSsid(received_ssid);
            memory->writeWifiPassword(received_password);
            ESP.restart();
        }
    } else {
        //check if still connected to wifi
        if((actual_time - last_wifi_request_time) >= WIFI_REQUEST_PERIOD){
            if(network->isConnectedToWiFi()){
                statusLED->setGreen();
            } else {
                statusLED->setRed();
            }
        }
    }
}

void handle_buttonPress(){
    config_mode = true;
    network->startAP();
    network->startWebServer();
}




    /*Serial.begin(9600);
    memoryManager = MemoryManager::getInstance();
    networkManager = NetworkManager::getInstance();
    statusLED = StatusLED::getInstance();
    //Log::initialize();
    networkManager->startAP();
    networkManager->startWebServer();*/



    /*
    networkManager = NetworkManager::getInstance();
    statusLED = StatusLED::getInstance();
    Serial.begin(9600);
    //initializing pin of button
    pinMode(BUTTON_PIN, INPUT_PULLDOWN);
    //attaching interrupt to button
    attachInterrupt(BUTTON_PIN, handle_buttonPress, RISING);
    //initializing pins of status led
    statusLED->initializePins();
    statusLED->setOff();
    if(networkManager->startClient()){
        print("connected to wifi");
        statusLED->setGreen();
    } else {
        print("connection failed");
        statusLED->setRed();
    }*/


     /*
    networkManager->handleWebserverClient();
    if(//Log::hasChanged()){
        //Log::add(//Log::get//Logs());
    }
    */

    /*
    if(networkManager->isWebserverRunning()){
        networkManager->handleWebserverClient();
    }
    if(config_mode){
        print("button pressed");
        networkManager->startAP();
        print("ap started");
        networkManager->startWebServer();
        config_mode = false;
    }
    if(networkManager->wifiCredentialsReceived()){
        print("wifi credentials received");
        print(networkManager->getClientSSID());
        print(networkManager->getClientPassword());
        /*if(networkManager->startClient()){
            print("connected to wifi");
            config_mode = false;
        }*/
    //}